# -*- org-babel-tangled-file: t; org-babel-tangle-run-postTangleScript: t; -*-

#+TITLE:     logger.org
#+AUTHOR:    Rainer M Krug
#+EMAIL:     Rainer@krugs.de
#+DESCRIPTION: R Package Development Helpers
#+KEYWORDS: 

:CONFIG:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

#+TODO: TODO OPTIMIZE TOGET COMPLETE WAIT VERIFY CHECK CODE DOCUMENTATION | DONE RECEIVED CANCELD 

#+STARTUP: indent hidestars nohideblocks
#+DRAWERS: HIDDEN PROPERTIES STATE CONFIG BABEL OUTPUT LATEXHEADER HTMLHEADER
#+STARTUP: nohidestars hideblocks
:END:
:HTMLHEADER:
#+begin_html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
Org-babel support for building 
  <a href="http://www.r-project.org/">R</a> packages
  </p>
  <p>
  <a href="http://www.r-project.org/">
  <img src="http://www.r-project.org/Rlogo.jpg"/>
  </a>
  </p>
  </div>
#+end_html
:END:
:LATEXHEADER:
#+LATEX_HEADER: \usepackage{rotfloat}
#+LATEX_HEADER: \definecolor{light-gray}{gray}{0.9}
#+LATEX_HEADER: \lstset{%
#+LATEX_HEADER:     basicstyle=\ttfamily\footnotesize,       % the font that is used for the code
#+LATEX_HEADER:     tabsize=4,                       % sets default tabsize to 4 spaces
#+LATEX_HEADER:     numbers=left,                    % where to put the line numbers
#+LATEX_HEADER:     numberstyle=\tiny,               % line number font size
#+LATEX_HEADER:     stepnumber=0,                    % step between two line numbers
#+LATEX_HEADER:     breaklines=true,                 %!! don't break long lines of code
#+LATEX_HEADER:     showtabs=false,                  % show tabs within strings adding particular underscores
#+LATEX_HEADER:     showspaces=false,                % show spaces adding particular underscores
#+LATEX_HEADER:     showstringspaces=false,          % underline spaces within strings
#+LATEX_HEADER:     keywordstyle=\color{blue},
#+LATEX_HEADER:     identifierstyle=\color{black},
#+LATEX_HEADER:     stringstyle=\color{green},
#+LATEX_HEADER:     commentstyle=\color{red},
#+LATEX_HEADER:     backgroundcolor=\color{light-gray},   % sets the background color
#+LATEX_HEADER:     columns=fullflexible,  
#+LATEX_HEADER:     basewidth={0.5em,0.4em}, 
#+LATEX_HEADER:     captionpos=b,                    % sets the caption position to `bottom'
#+LATEX_HEADER:     extendedchars=false              %!?? workaround for when the listed file is in UTF-8
#+LATEX_HEADER: }
:END:
:BABEL:
#+PROPERTY: exports code
#+PROPERTY: comments yes
#+PROPERTY: padline no
#+PROPERTY: var MAJORVERSION=0
#+PROPERTY: var+ MINORVERSION=0
#+PROPERTY: var+ PATCHVERSION=1
#+PROPERTY: var+ GITHASH="testhash" 
#+PROPERTY: var+ GITCOMMITDATE="testdate"
:END:

* Internal configurations                      :noexport:
** Evaluate to run post tangle script
#+begin_src emacs-lisp :results silent :tangle no :exports none
  (add-hook 'org-babel-post-tangle-hook
            (
             lambda () 
                    (call-process-shell-command "./postTangleScript.sh" nil 0 nil)
  ;;              (async-shell-command "./postTangleScript.sh")
  ;;              (ess-load-file (save-window-excursion (replace-regexp-in-string ".org" ".R" buffer-file-name)))))
  ;;              (ess-load-file "nsa.R")))
  ;;              (ess-load-file "spreadSim.R")
                    )
            )
#+end_src

** Post tangle script
#+begin_src sh :results output :tangle ./postTangleScript.sh :var VER=(vc-working-revision (buffer-file-name)) :var STATE=(vc-state (or (buffer-file-name) org-current-export-file))
  sed -i '' s/MAJORVERSION/$MAJORVERSION/ ./DESCRIPTION
  sed -i '' s/MINORVERSION/$MINORVERSION/ ./DESCRIPTION
  sed -i '' s/PATCHVERSION/$PATCHVERSION/ ./DESCRIPTION
  sed -i '' s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./DESCRIPTION

  sed -i '' s/MAJORVERSION/$MAJORVERSION/ ./logger-package.R
  sed -i '' s/MINORVERSION/$MINORVERSION/ ./logger-package.R
  sed -i '' s/PATCHVERSION/$PATCHVERSION/ ./logger-package.R
  sed -i '' s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./logger-package.R

  Rscript -e "library(roxygen2);roxygenize('pkg', roxygen.dir='pkg', copy.package=FALSE, unlink.target=FALSE)"
  rm -f ./postTangleScript.sh
#+end_src

#+RESULTS:


* gitignore file (./.gitignore)
:PROPERTIES:
:tangle: ./.gitignore
:comments: no
:no-expand: TRUE
:shebang:
:padline: no
:END: 
#+begin_src gitignore
  *#logger.*
  logger.*
  !logger.org*
  *.o
  *.so
  *.rds
  .#*
  #*
  *#
  *~
#+end_src

* Git Revision info
Complete version info
#+begin_src sh :exports results :results output replace 
  echo "Version     : " $MAJORVERSION.$MINORVERSION-$PATCHVERSION
  echo "Commit date : " `git show -s --format="%ci" HEAD`
  echo "git HASH    : " `git rev-parse HEAD`
  echo "git status  : "
  git status
#+end_src

#+RESULTS:
: Version     :  .4-13
: Commit date :  2013-03-20 18:33:21 +0100
: git HASH    :  906d085c35b4b835082e4583c4134c5ddf7f1555
: git status  : 
: # On branch master
: nothing to commit, working directory clean



* Rbuildignore file (./.Rbuildignore)
:PROPERTIES:
:tangle: ./.Rbuildignore
:comments: no
:no-expand: TRUE
:shebang:
:padline: no
:END: 
#+begin_src fundamental
  .git
  ^.*\\.org$
  ^logger.
  .logger.
  .gitignore
  library
  version
  postTangleScript.sh
#+end_src



* Package Files
** DESCRIPTION
:PROPERTIES:
:tangle:   ./DESCRIPTION
:padline: no 
:no-expand: TRUE
:comments: no
:END:
#+begin_src fundamental
Package: logger
Type: Package
Title: Very Simple Logger
Version: MAJORVERSION.MINORVERSION-PATCHVERSION
Date: TODAYSDATE
Author: Rainer M. Krug
Maintainer: Rainer M Krug <Rainer@krugs.de>
Description: Simple loging without dependencies
License: GPL-3
LazyLoad: yes
#+end_src

** NAMESPACE
:PROPERTIES:
:tangle:   ./NAMESPACE
:padline: no 
:no-expand: TRUE
:comments: no
:END:
#+begin_src R
  # useDynLib(logger)
  exportPattern("^[[:alpha:]]+")
#+end_src

#+results:


* R directory (./R)

** logging (./logging.R)
:PROPERTIES:
:comments: yes
:no-expand: TRUE
:END:
*** define logging environment
:PROPERTIES:
:tangle: ./R/aaa.R
:END:
#+begin_src R
  .logData <- new.env()
  ##
  assign("loggingThreshold", 10, envir = .logData)
  assign("logToFile", FALSE, envir = .logData)
  assign("logFileName", NULL, envir = .logData)

  assign("logToConsole", TRUE, envir = .logData)
  ##
  assign("logHeaderLevel", 0, envir = .logData)
  assign("logHeader", "", envir = .logData)
  assign("logHeaderClock", "", envir = .logData)
  assign("timeFormat", "", envir = .logData)

.onAttach <- function(...) {
    ThisIsATest <<- 99
    }
#+end_src

*** getLoggingThreshold
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter for logging threshold
  ##'
  ##' getter function for logging threshold.
  ##' Maximum header level which will be logged, default value is 10.
  ##' @return integer value for the logging threshold
  ##' @author Dr Rainer M Krug
  ##' @export
  getLoggingThreshold <- function() {
    return( get("loggingThreshold", envir = .logData) )
  }
#+end_src
*** setLoggingThreshold
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' Set logging threshold
  ##'
  ##' Set logging threshold to new value
  ##' @author Dr Rainer M Krug
  ##' @export
  ##' @param newLoggingThreshold the new logging threshold to be used.
  ##'   default value: 10
  ##' @return the old logging threshold used
  setLoggingThreshold <- function(newLoggingThreshold = 10) {
    oldLoggingThreshold <- get("loggingThreshold", envir = .logData)
    assign("loggingThreshold", newLoggingThreshold, envir = .logData)
    invisible( oldLoggingThreshold )
  }
#+end_src

*** getLogFileName
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter for logFileName
  ##'
  ##' getter function for log file name
  ##' Name of log file
  ##' @return integer value for the logging threshold
  ##' @author Dr Rainer M Krug
  ##' @export
  getLogFileName <- function() {
    return( get("logFileName", envir = .logData) )
  }
#+end_src
*** setLogFileName
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' Set log file name
  ##'
  ##' Set log file name
  ##' If the name is null (default), logging to file will be disabled.
  ##' @author Dr Rainer M Krug
  ##' @export
  ##' @param newLogFileName the new log file name to be used
  ##'   default value: 10
  ##' @return the old logging threshold used
  setLogFileName <- function(newLogFileName = NULL) {
    oldLogFileName <- get("logFileName", envir = .logData)
    assign("logFileName", newLogFileName, envir = .logData)
    if (is.null(newLogFileName)) {
        assign("logToFile", FALSE, envir = .logData)
    }
    invisible( oldLogFileName )
  }
#+end_src

*** getLogToFile
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter for logToFile
  ##'
  ##' getter function for logToFile
  ##' TRUE if logging to getLogFileName(), otherwise FALSE
  ##' @return logical, TRUE if logging to file, otherwise FALSE
  ##' @author Dr Rainer M Krug
  ##' @export
  getLogToFile <- function() {
    return( get("logToFile", envir = .logData) )
  }
#+end_src
*** setLogToFile
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' Set logToFile
  ##'
  ##' Set logToFile
  ##' If logFileName is NULL, this value can not be set to TRUE and will issue a warning 
  ##' @author Dr Rainer M Krug
  ##' @export
  ##' @param newValue logical, TRUE if logs should be written to LogFileName, FALSE if not
  ##'   default value: FALSE
  ##' @return the old value of logToFile
  setLogToFile<- function( newValue ) {
      oldValue <- get("logToFile", envir = .logData)
      if (is.null(getLogFileName()) & newValue) {
          warning("can not set logToFile to TRUE if logFileName==NULL!\n\nlogToFile set to FALSE!")
          assign("logToFile", FALSE, envir = .logData)
      } else {
          assign("logToFile", newValue, envir = .logData)
      }
      invisible( oldValue )
  }
#+end_src


*** getLogToConsole
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter for logToConsole
  ##'
  ##' getter function for logToConsole
  ##' @return logical, TRUE if logging to console, otherwise FALSE
  ##' @author Dr Rainer M Krug
  ##' @export
  getLogToConsole <- function() {
    return( get("logToConsole", envir = .logData) )
  }
#+end_src
*** setLogToConsole
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' Set logToConsole
  ##'
  ##' Set logToConsole
  ##' 
  ##' @author Dr Rainer M Krug
  ##' @export
  ##' @param newValue logical, TRUE if logs should be written to console, FALSE if not
  ##'   default value: FALSE
  ##' @return the old value of logToConsole
  setLogToConsole <- function(newValue = NULL) {
    oldValue <- get("logToConsole", envir = .logData)
    assign("logToConsole", newValue, envir = .logData)
    invisible( oldValue )
  }
#+end_src


*** getHeaderLevel
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter for header level
  ##'
  ##' getter function for header level
  ##' @title getterAndSetter
  ##' @return integer value for the header level
  ##' @author Dr Rainer M Krug
  ##' @export
  getHeaderLevel <- function() {
    return( get("logHeaderLevel", envir = .logData) )
  }
#+end_src
*** getHeader
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter for the last header used
  ##'
  ##' getter function for last header
  ##' @return character string containing last header
  ##' @author Dr Rainer M Krug
  ##' @export
  getHeader <- function() {
    return( get("logHeader", envir = .logData)[getHeaderLevel()] )
  }
#+end_src
*** getHeaderClock
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' getter function for time last header
  ##'
  ##' getter function for the time when the last header was logged
  ##' @return character string for the last header time
  ##' @author Dr Rainer M Krug
  ##' @export
  getHeaderClock <- function() {
    return( get("logHeaderClock", envir = .logData)[getHeaderLevel()] )
  }
#+end_src
*** setTimeFormat
:PROPERTIES:
:tangle: ./R/getterAndSetter.R
:END:
#+begin_src R 
  ##' Set time format
  ##'
  ##' Set time format which will be used to formate the timestamps
  ##' @param newFormat new timeformat to be used. See ?strptime for details of the format 
  ##' @return the old format string used
  ##' @author Dr Rainer M Krug
  ##' @export
  setTimeFormat <- function(newFormat) {
    oldFormat <- get("timeFormat", envir = .logData)
    assign("timeFormat", newFormat, envir = .logData)
    invisible( oldFormat )
  }
#+end_src


*** .incHeaderLevel
:PROPERTIES:
:tangle: ./R/incHeaderLevel.R
:END:
#+begin_src R 
  ##' Increment header level
  ##'
  ##' Increases the header level by one, using the given header and clock time
  ##' @title incHeaderLevel
  ##' @param header character string, Header of the new header level
  ##' @param clock character string, containing the timestamp
  ##' @return  integer value for the the new header level
  ##' @author Dr Rainer M Krug
  .incHeaderLevel <- function(header, clock) {
    nl <- getHeaderLevel() + 1
    nh <- c(get("logHeader", envir = .logData), header)
    nc <- c(get("logHeaderClock", envir = .logData), clock)
    assign("logHeaderLevel", nl, envir = .logData)
    assign("logHeader", nh, envir = .logData)
    assign("logHeaderClock", nc, envir = .logData)
    invisible( nl )
  }
#+end_src

*** .decHeaderLevel
:PROPERTIES:
:tangle: ./R/decHeaderLevel.R
:END:
#+begin_src R 
  ##' decreases the header level
  ##'
  ##' decreases the header level.
  ##' @title decHeaderLevel
  ##' @return integer value for the new header level
  ##' @author Dr Rainer M Krug
  .decHeaderLevel <- function() {
    ol <- getHeaderLevel()
    if (ol == 0) {
      nl <- 0
    } else {
      nl <- ol - 1
      assign("logHeaderLevel", nl,                                             envir = .logData)
      assign("logHeader",      get("logHeader", envir = .logData)[1:nl],      envir = .logData)
      assign("logHeaderClock", get("logHeaderClock", envir = .logData)[1:nl], envir = .logData)
    }
    if (nl==0) {
      assign("logHeader", NULL, envir=.logData)
      assign("logHeaderClock", NULL, envir=.logData)
    }
    invisible( nl )
  }
#+end_src

*** logtime
:PROPERTIES:
:tangle: ./R/logtime.R
:END:
#+begin_src R 
  ##' Format function for time
  ##'
  ##' Used to have a consistent format for the time.
  ##' @title logtime
  ##' @return character vector of Sys.time()
  ##' @author Dr Rainer M Krug
  ##' @export
  logTime <- function() {
    return(format(Sys.time(),  get("timeFormat", envir = .logData)))
  }
#+end_src
*** newLogFile
:PROPERTIES:
:tangle: ./R/newLogFile.R
:END:
#+begin_src R
  ##' Create empty logfile and mark it as org file
  ##'
  ##' Creates a new empty log file with one initial line defining it as an org-mode file,
  ##' i.e. when opened with org-mode in emacs, it is formated to provide folding et al.
  ##' An existing file with the same name will be deleted!
  ##' The variable logFileName will be set and logging to file will be enabled.
  ##' @title newLogFile
  ##' @param logFileName character, the neme including path for the new logfile.
  ##' @return character value of the old log file name
  ##' @author Rainer M Krug
  ##' @export
  newLogFile <- function( logFileName ) {
      unlink( logFileName )
      file.create( logFileName )
      cat(
          "#    -*- mode: org -*-\n",
          file = logFileName,
          append = TRUE
          )
      oldLogFileName <- getLogFileName()
      setLogFileName( logFileName )
      ## assign("logHeaderLevel", 0, envir = .logData)
      ## assign("logHeader", NULL, envir = .logData)
      ## assign("logHeaderClock", NULL, envir = .logData)
      invisible(oldLogFileName)
  }
#+end_src

*** logBegin
:PROPERTIES:
:tangle: ./R/logBegin.R
:END:
#+begin_src R
  ##' log as org mode compatible format
  ##'
  ##' Logging in org mode compatible format
  ##' @title logBegin
  ##' @param ... values which will be concatenated using paste(..., collapse=" ")
  ##'   to the message to be logged.
  ##' @return invisible returns new header level
  ##' @author Rainer M Krug
  ##' @export
  logBegin <- function( ... ) {
      hc <- logTime()
      hl <- .incHeaderLevel(paste(..., collapse=" "), clock=hc)
      if (hl <= getLoggingThreshold()) {
          msg <- paste0(
              paste0(rep("*", (hl*2-1)), collapse=""), " ", "[", hc, "] ", getHeader(), " BEGIN", "\n"
              )
          if (getLogToFile()) {
              cat(
                  msg,
                  file = getLogFileName(),
                  append = TRUE
                  )
          }
          if (getLogToConsole()) {
              cat("\n", msg, "\n")
          }
      }
      invisible(hl)
  }
#+end_src

*** logEnd
:PROPERTIES:
:tangle: ./R/logEnd.R
:END:
#+begin_src R
  ##' Ends logging header
  ##'
  ##' Ends logging header and writes timestanps of begin time and end time
  ##' @title logEnd
  ##' @return invisible returns the new header level
  ##' @author Rainer M Krug
  ##' @export
  logEnd <- function( ) {
    hc <- logTime()
    hl <- getHeaderLevel()
    if (hl <= getLoggingThreshold()) {
      msg <- paste0(
        paste0(rep("*", (hl*2-1)), collapse=""), " [", hc, "] ", getHeader(), " END", "\n",
        "CLOCK: [", getHeaderClock(), "]--[", hc, "]\n"
        )
      if (getLogToFile()) {
        cat(
          msg,
          file = getLogFileName(),
          append = TRUE
          )
      }
      if (getLogToConsole()) {
        cat("\n", msg, "\n")
      }
    }
    invisible( .decHeaderLevel() )
  }
#+end_src

*** logList
:PROPERTIES:
:tangle: ./R/logEnd.R
:END:
#+begin_src R
  ##' log an entry without changing the header level
  ##'
  ##' Log a message in the actual logging level.
  ##' @title logList
  ##' @param ... values which will be concatenated using paste(..., collapse=" ")
  ##'   to the message to be logged.
  ##' @author Rainer M Krug
  ##' @export
  logList <- function( ... ) {
    hl <- getHeaderLevel()
    if (hl <= getLoggingThreshold()) {
      msg <- paste0(
        paste0(rep("*", (hl*2)), collapse=""), " [", logTime(), "] ", paste( ..., collapse=" " ), "\n"
        )
      if (getLogToFile()) {
        cat(
          msg,
          file = getLogFileName(),
          append = TRUE
          )
      }
      if (getLogToConsole()) {
        cat("\n", msg, "\n")
      }
    }
    invisible(NULL)
  }
#+end_src


* TODO Tests
Write test functions
* TODO Vignette
Write vignette
* package management                                               :noexport:
** check package
#+begin_src sh :results output
  CWD=`pwd`
  R CMD check pkg | sed 's/^*/ */'
#+end_src

#+results:
#+begin_example
 * using log directory ‘/home/rkrug/Documents/Projects/R-Packages/seeddisp/pkg.Rcheck’
 * using R version 2.13.2 (2011-09-30)
 * using platform: i686-pc-linux-gnu (32-bit)
 * using session charset: UTF-8
 * checking for file ‘DESCRIPTION’ ... OK
 * checking extension type ... Package
 * this is package ‘logger’ version ‘0.0-13’
 * checking package namespace information ... OK
 * checking package dependencies ... OK
 * checking if this is a source package ... WARNING
Subdirectory ‘logger/src’ contains object files.
 * checking for executable files ... OK
 * checking whether package ‘logger’ can be installed ... OK
 * checking installed package size ... OK
 * checking package directory ... OK
 * checking for portable file names ... OK
 * checking for sufficient/correct file permissions ... OK
 * checking DESCRIPTION meta-information ... OK
 * checking top-level files ... OK
 * checking index information ... OK
 * checking package subdirectories ... WARNING
Subdirectory 'inst' contains no files.
 * checking R files for non-ASCII characters ... OK
 * checking R files for syntax errors ... OK
 * checking whether the package can be loaded ... OK
 * checking whether the package can be loaded with stated dependencies ... OK
 * checking whether the package can be unloaded cleanly ... OK
 * checking whether the namespace can be loaded with stated dependencies ... OK
 * checking whether the namespace can be unloaded cleanly ... OK
 * checking for unstated dependencies in R code ... OK
 * checking S3 generic/method consistency ... OK
 * checking replacement functions ... OK
 * checking foreign function calls ... OK
 * checking R code for possible problems ... OK
 * checking Rd files ... OK
 * checking Rd metadata ... OK
 * checking Rd cross-references ... OK
 * checking for missing documentation entries ... WARNING
Undocumented code objects:
  waterDisp
All user-level objects in a package should have documentation entries.
See the chapter 'Writing R documentation files' in the 'Writing R
Extensions' manual.
 * checking for code/documentation mismatches ... WARNING
Codoc mismatches from documentation object 'birdDispGRASS':
birdDispGRASS
  Code: function(input, output = "birdDispSeeds", zeroToNULL = TRUE,
                 overwrite = FALSE)
  Docs: function(input, output, overwrite)
  Argument names in code not in docs:
    zeroToNULL
  Mismatches in argument names:
    Position: 3 Code: zeroToNULL Docs: overwrite
  Mismatches in argument default values:
    Name: 'output' Code: "birdDispSeeds" Docs: 
    Name: 'overwrite' Code: FALSE Docs: 

Codoc mismatches from documentation object 'localDispGRASS':
localDispGRASS
  Code: function(input, output = "localDispSeeds", zeroToNULL = TRUE,
                 overwrite = FALSE)
  Docs: function(input, output, overwrite)
  Argument names in code not in docs:
    zeroToNULL
  Mismatches in argument names:
    Position: 3 Code: zeroToNULL Docs: overwrite
  Mismatches in argument default values:
    Name: 'output' Code: "localDispSeeds" Docs: 
    Name: 'overwrite' Code: FALSE Docs: 

Codoc mismatches from documentation object 'waterDispGRASS':
waterDispGRASS
  Code: function(input, output = "waterDispSeeds", slope = "slope",
                 flowdir = "flowdir", depRates, overwrite = FALSE,
                 zeroToNULL = TRUE, progress = TRUE)
  Docs: function(input, output = "waterDispSeeds", slope = "SLOPE",
                 flowdir = "FLOWDIR", overwrite = FALSE)
  Argument names in code not in docs:
    depRates zeroToNULL progress
  Mismatches in argument names:
    Position: 5 Code: depRates Docs: overwrite
  Mismatches in argument default values:
    Name: 'slope' Code: "slope" Docs: "SLOPE"
    Name: 'flowdir' Code: "flowdir" Docs: "FLOWDIR"

Codoc mismatches from documentation object 'windDisp':
windDisp
  Code: function(SD2D, SEEDS, MASK, zeroToNULL)
  Docs: function(SD2D, SEEDS, MASK)
  Argument names in code not in docs:
    zeroToNULL

Codoc mismatches from documentation object 'windDispGRASS':
windDisp
  Code: function(SD2D, SEEDS, MASK, zeroToNULL)
  Docs: function(SD2D, input, output = "windDispSeeds", overwrite =
                 FALSE)
  Argument names in code not in docs:
    SEEDS MASK zeroToNULL
  Argument names in docs not in code:
    input output overwrite
  Mismatches in argument names:
    Position: 2 Code: SEEDS Docs: input
    Position: 3 Code: MASK Docs: output
    Position: 4 Code: zeroToNULL Docs: overwrite

 * checking Rd \usage sections ... WARNING
Documented arguments not in \usage in documentation object 'waterDispGRASS':
  depRates

Objects in \usage without \alias in documentation object 'windDispGRASS':
  windDisp

Functions with \usage entries need to have the appropriate \alias
entries, and all their arguments documented.
The \usage entries must correspond to syntactically valid R code.
See the chapter 'Writing R documentation files' in the 'Writing R
Extensions' manual.
 * checking Rd contents ... OK
 * checking for unstated dependencies in examples ... OK
 * checking line endings in C/C++/Fortran sources/headers ... OK
 * checking line endings in Makefiles ... OK
 * checking for portable compilation flags in Makevars ... OK
 * checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
 * checking examples ... NONE
 * checking PDF version of manual ... OK
WARNING: There were 5 warnings, see
  ‘/home/rkrug/Documents/Projects/R-Packages/seeddisp/pkg.Rcheck/00check.log’
for details
#+end_example



** INSTALL package

#+begin_src sh :results output :var rckopts="--library=./Rlib"
  R CMD INSTALL $rckopts pkg
#+end_src



** build package

#+begin_src sh :results output
  R CMD build ./
#+end_src

#+results:



** load library

#+begin_src R :session :results output :var libname=(file-name-directory buffer-file-name)
## customize the next line as needed: 
.libPaths(new = file.path(getwd(),"Rlib") )
require( basename(libname), character.only=TRUE)
#+end_src

#+results:

- this loads the library into an R session
- customize or delete the =.libPaths= line as desired 


: #+begin_src R :session :var libname=(file-name-directory buffer-file-name)
: .libPaths(new = file.path(getwd(),"Rlib") )
: require( basename(libname), character.only=TRUE)
: #+end_src

** grep require( 

- if you keep all your source code in this =.org= document, then you do not
  need to do this - instead just type =C-s require(=
- list package dependencies that might need to be dealt with

#+begin_src sh :results output
grep 'require(' R/*
#+end_src

: #+begin_src sh :results output
: grep 'require(' R/*
: #+end_src

** set up .Rbuildignore and man, R, and Rlib directories

- This document sits in the top level source directory. So, ignore it
  and its offspring when checking, installing and building.
- List all files to ignore under =#+results: rbi=  (including this
  one!). Regular expressions are allowed.
- Rlib is optional. If you want to INSTALL in the system directory,
  you own't need it.

: #+results: rbi
#+results: rbi
: Rpackage.*
: PATCHVERSION
: MAJORVERSION
: MINORVERSION

Only need to run this once (unless you add more ignorable files).

#+begin_src R :results output silent :var rbld=rbi 
dir.create("./logger")
cat(rbld,'\n', file="./.Rbuildignore")
dir.create("./man")
dir.create("./R")
dir.create("./src")
dir.create("./Rlib")
#+end_src

: #+begin_src R :results output silent :var rbld=rbi 
: cat(rbld,'\n', file=".Rbuildignore")
: dir.create("man")
: dir.create("R")
: dir.create("../Rlib")
: #+end_src

* Package structure and src languages                              :noexport:

- The top level directory may contain these files (and others):

| filename    | filetype      |
|-------------+---------------|
| INDEX       | text          |
| NAMESPACE   | R-like script |
| configure   | Bourne shell  |
| cleanup     | Bourne shell  |
| LICENSE     | text          |
| LICENCE     | text          |
| COPYING     | text          |
| NEWS        | text          |
| DESCRIPTION | [[http://www.debian.org/doc/debian-policy/ch-controlfields.html][DCF]]           |
|-------------+---------------|


 
   and subdirectories
| direname | types of files                                   |
|----------+--------------------------------------------------|
| R        | R                                                |
| data     | various                                          |
| demo     | R                                                |
| exec     | various                                          |
| inst     | various                                          |
| man      | Rd                                               |
| po       | poEdit                                           |
| src      | .c, .cc or .cpp, .f, .f90, .f95, .m, .mm, .M, .h |
| tests    | R, Rout                                          |
|----------+--------------------------------------------------|
|          |                                                  |
   
 [[info:emacs#Specifying%20File%20Variables][info:emacs#Specifying File Variables]]
